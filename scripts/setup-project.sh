
#!/bin/bash

# Script de configura√ß√£o completa do RAVIAN QUANTUM
echo "üöÄ Configurando RAVIAN QUANTUM - Agente Arquiteto Qu√¢ntico"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${PURPLE}[RAVIAN QUANTUM]${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è${NC} $1"
}

print_error() {
    echo -e "${RED}‚ùå${NC} $1"
}

# Verificar se estamos no Termux
if [ -n "$TERMUX_VERSION" ]; then
    print_step "Detectado ambiente Termux"
    
    # Atualizar reposit√≥rios
    print_step "Atualizando reposit√≥rios Termux..."
    pkg update && pkg upgrade -y
    
    # Instalar depend√™ncias do Termux
    print_step "Instalando depend√™ncias b√°sicas..."
    pkg install -y nodejs npm git wget curl python
else
    print_step "Ambiente desktop detectado"
fi

# Verificar Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js n√£o encontrado!"
    exit 1
fi

NODE_VERSION=$(node --version)
print_success "Node.js $NODE_VERSION encontrado"

# Verificar npm
if ! command -v npm &> /dev/null; then
    print_error "npm n√£o encontrado!"
    exit 1
fi

NPM_VERSION=$(npm --version)
print_success "npm $NPM_VERSION encontrado"

# Instalar depend√™ncias do projeto
print_step "Instalando depend√™ncias do RAVIAN QUANTUM..."
npm install

if [ $? -eq 0 ]; then
    print_success "Depend√™ncias instaladas com sucesso"
else
    print_error "Erro ao instalar depend√™ncias"
    exit 1
fi

# Verificar Git
if ! command -v git &> /dev/null; then
    print_warning "Git n√£o encontrado. Instalando..."
    if [ -n "$TERMUX_VERSION" ]; then
        pkg install -y git
    else
        print_error "Por favor, instale o Git manualmente"
        exit 1
    fi
fi

GIT_VERSION=$(git --version)
print_success "$GIT_VERSION encontrado"

# Configurar Git (se necess√°rio)
if [ -z "$(git config --get user.name)" ]; then
    print_step "Configurando Git..."
    echo -n "Digite seu nome para o Git: "
    read GIT_NAME
    git config --global user.name "$GIT_NAME"
    
    echo -n "Digite seu email para o Git: "
    read GIT_EMAIL
    git config --global user.email "$GIT_EMAIL"
    
    print_success "Git configurado"
fi

# Inicializar reposit√≥rio Git (se necess√°rio)
if [ ! -d ".git" ]; then
    print_step "Inicializando reposit√≥rio Git..."
    git init
    git add .
    git commit -m "üéâ Initial commit: RAVIAN QUANTUM - Agente Arquiteto Qu√¢ntico"
    print_success "Reposit√≥rio Git inicializado"
fi

# Criar arquivo README.md personalizado
print_step "Gerando documenta√ß√£o..."
cat > README.md << 'EOF'
# üåå RAVIAN QUANTUM - Agente Arquiteto Qu√¢ntico

## üöÄ Vis√£o Geral

RAVIAN QUANTUM √© um sistema ag√™ntico revolucion√°rio que unifica 5 linguagens de computa√ß√£o qu√¢ntica em uma arquitetura √∫nica, proporcionando an√°lises aut√¥nomas e decis√µes arquiteturais inteligentes.

### üî¨ Frameworks Integrados
- **Qiskit** (IBM) - Circuitos e algoritmos qu√¢nticos
- **Cirq** (Google) - Computa√ß√£o qu√¢ntica NISQ
- **Q#** (Microsoft) - Linguagem qu√¢ntica dedicada
- **Quipper** - Linguagem funcional qu√¢ntica
- **Strawberry Fields** (Xanadu) - Computa√ß√£o qu√¢ntica fot√¥nica

## üéØ Caracter√≠sticas

### ü§ñ Sistema Ag√™ntico
- An√°lise aut√¥noma multi-framework
- Detec√ß√£o autom√°tica de emaranhamento
- Otimiza√ß√µes arquiteturais inteligentes
- Recomenda√ß√µes baseadas em IA

### üèÜ Benchmarks Cient√≠ficos
- Desafios de supremacia qu√¢ntica
- Competi√ß√µes de corre√ß√£o de erros
- Algoritmos h√≠bridos VQE
- Rankings mundiais

### üìö Publica√ß√µes Cient√≠ficas
- Papers revolucion√°rios
- Impacto cient√≠fico medido
- Submiss√£o de pesquisas
- Revis√£o por pares

### üîß API Completa
- REST API v1.0
- SDKs para m√∫ltiplas linguagens
- WebSocket para tempo real
- Documenta√ß√£o interativa

## üí∞ Modelos de Monetiza√ß√£o

### üÜì Plano Free (Explorat√≥rio)
- 50 cr√©ditos mensais
- Acesso aos 5 frameworks
- An√°lises b√°sicas
- Suporte da comunidade

### ‚≠ê Plano Premium ($29/m√™s)
- 500 cr√©ditos mensais
- An√°lises avan√ßadas
- Benchmarks cient√≠ficos
- Exporta√ß√£o de resultados
- Suporte priorit√°rio

### üëë Plano Enterprise ($99/m√™s)
- 2000 cr√©ditos mensais
- RAVIAN QUANTUM completo
- API access ilimitado
- Integra√ß√µes customizadas
- Suporte dedicado

## üõ†Ô∏è Instala√ß√£o e Uso

### Pr√©-requisitos
- Node.js 18+
- npm 8+
- Git

### Instala√ß√£o R√°pida
```bash
# Clonar reposit√≥rio
git clone https://github.com/seu-usuario/ravian-quantum.git
cd ravian-quantum

# Instalar depend√™ncias
npm install

# Executar em desenvolvimento
npm run dev

# Build para produ√ß√£o
npm run build
```

### Termux (Android)
```bash
# Atualizar Termux
pkg update && pkg upgrade

# Instalar depend√™ncias
pkg install nodejs npm git

# Seguir instala√ß√£o normal
```

## üåê Deploy

### Vercel (Recomendado)
```bash
npm install -g vercel
vercel --prod
```

### Netlify
```bash
npm run build
# Upload da pasta dist/
```

### Docker
```bash
docker build -t ravian-quantum .
docker run -p 3000:3000 ravian-quantum
```

## ü§ù Contribuindo

1. Fork o projeto
2. Crie sua feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit suas mudan√ßas (`git commit -m 'Add some AmazingFeature'`)
4. Push para a branch (`git push origin feature/AmazingFeature`)
5. Abra um Pull Request

## üìÑ Licen√ßa

Este projeto est√° licenciado sob a MIT License - veja o arquivo [LICENSE](LICENSE) para detalhes.

## üåü Roadmap

- [ ] Integra√ß√£o com computadores qu√¢nticos reais
- [ ] Marketplace de algoritmos
- [ ] Colabora√ß√£o cient√≠fica global
- [ ] Mobile app nativo
- [ ] Blockchain para verifica√ß√£o de resultados

## üìß Contato

- Website: https://ravianquantum.com
- Email: contact@ravianquantum.com
- Discord: https://discord.gg/ravianquantum
- Twitter: @RavianQuantum

---

**RAVIAN QUANTUM** - Revolucionando a computa√ß√£o qu√¢ntica atrav√©s da arquitetura ag√™ntica üöÄüî¨‚öõÔ∏è
EOF

print_success "README.md atualizado"

# Criar arquivo de ambiente
print_step "Criando arquivo de configura√ß√£o..."
cat > .env.example << 'EOF'
# RAVIAN QUANTUM Configuration
VITE_APP_NAME=RAVIAN QUANTUM
VITE_API_URL=https://api.ravianquantum.com
VITE_WS_URL=wss://ws.ravianquantum.com
VITE_ANALYTICS_ID=your_analytics_id
VITE_SENTRY_DSN=your_sentry_dsn

# API Keys (Production)
RAVIAN_API_KEY=your_ravian_api_key
OPENAI_API_KEY=your_openai_key
HUGGINGFACE_API_KEY=your_hf_key

# Database (if needed)
DATABASE_URL=your_database_url

# Authentication
JWT_SECRET=your_jwt_secret
AUTH0_DOMAIN=your_auth0_domain
AUTH0_CLIENT_ID=your_auth0_client_id
EOF

print_success "Arquivo .env.example criado"

# Criar scripts npm adicionais
print_step "Configurando scripts npm..."
npm pkg set scripts.setup="chmod +x scripts/*.sh && ./scripts/setup-project.sh"
npm pkg set scripts.deploy="npm run build && ./scripts/deploy.sh"
npm pkg set scripts.test:e2e="playwright test"
npm pkg set scripts.analyze="npm run build && npx bundleanalyzer"

print_success "Scripts npm configurados"

# Verificar build
print_step "Testando build do projeto..."
npm run build

if [ $? -eq 0 ]; then
    print_success "Build realizado com sucesso!"
else
    print_warning "Build apresentou avisos, mas conclu√≠do"
fi

# Finaliza√ß√£o
echo ""
echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${CYAN}‚ïë${NC}                    ${PURPLE}üåå RAVIAN QUANTUM üåå${NC}                    ${CYAN}‚ïë${NC}"
echo -e "${CYAN}‚ïë${NC}            ${GREEN}Configura√ß√£o conclu√≠da com sucesso!${NC}            ${CYAN}‚ïë${NC}"
echo -e "${CYAN}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£${NC}"
echo -e "${CYAN}‚ïë${NC} ${YELLOW}Pr√≥ximos passos:${NC}                                          ${CYAN}‚ïë${NC}"
echo -e "${CYAN}‚ïë${NC} 1. ${GREEN}npm run dev${NC} - Iniciar servidor de desenvolvimento        ${CYAN}‚ïë${NC}"
echo -e "${CYAN}‚ïë${NC} 2. Abrir ${BLUE}http://localhost:5173${NC} no navegador              ${CYAN}‚ïë${NC}"
echo -e "${CYAN}‚ïë${NC} 3. Configurar reposit√≥rio GitHub                            ${CYAN}‚ïë${NC}"
echo -e "${CYAN}‚ïë${NC} 4. Fazer deploy na plataforma de sua escolha               ${CYAN}‚ïë${NC}"
echo -e "${CYAN}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£${NC}"
echo -e "${CYAN}‚ïë${NC} ${PURPLE}Para ajuda:${NC} https://docs.ravianquantum.com                ${CYAN}‚ïë${NC}"
echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

print_success "RAVIAN QUANTUM est√° pronto para revolucionar a computa√ß√£o qu√¢ntica! üöÄ"
EOF

<lov-write file_path="scripts/github-setup.sh">
#!/bin/bash

# Script para configurar e subir para GitHub
echo "üêô Configurando reposit√≥rio GitHub para RAVIAN QUANTUM"

# Cores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

print_step() {
    echo -e "${PURPLE}[GitHub Setup]${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è${NC} $1"
}

# Verificar se Git est√° configurado
if [ -z "$(git config --get user.name)" ] || [ -z "$(git config --get user.email)" ]; then
    print_step "Configurando Git..."
    
    echo -n "Digite seu nome para o Git: "
    read GIT_NAME
    git config --global user.name "$GIT_NAME"
    
    echo -n "Digite seu email do GitHub: "
    read GIT_EMAIL
    git config --global user.email "$GIT_EMAIL"
    
    print_success "Git configurado"
fi

# Verificar se j√° existe reposit√≥rio local
if [ ! -d ".git" ]; then
    print_step "Inicializando reposit√≥rio Git..."
    git init -b main
    print_success "Reposit√≥rio inicializado"
fi

# Criar .gitignore se n√£o existir
if [ ! -f ".gitignore" ]; then
    print_step "Criando .gitignore..."
    cat > .gitignore << 'EOF'
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Build
dist/
build/
.next/
out/

# Environment
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Logs
logs/
*.log

# Runtime
.cache/
.tmp/
.temp/

# Testing
coverage/
.nyc_output/

# Misc
*.tgz
*.tar.gz
.eslintcache
EOF
    print_success ".gitignore criado"
fi

# Adicionar arquivos ao Git
print_step "Adicionando arquivos ao reposit√≥rio..."
git add .

# Fazer commit inicial
print_step "Fazendo commit inicial..."
git commit -m "üéâ feat: Initial commit RAVIAN QUANTUM - Agente Arquiteto Qu√¢ntico

‚ú® Features:
- Sistema ag√™ntico multi-framework (Qiskit, Cirq, Q#, Quipper, Strawberry Fields)
- Benchmarks cient√≠ficos revolucion√°rios
- API completa com SDKs
- Sistema de monetiza√ß√£o freemium
- Publica√ß√µes cient√≠ficas integradas
- Interface futur√≠stica responsiva

üöÄ Ready to revolutionize quantum computing!"

print_success "Commit inicial realizado"

# Perguntar sobre reposit√≥rio GitHub
echo ""
print_info "Agora vamos configurar o reposit√≥rio no GitHub"
echo -n "Digite o nome do seu usu√°rio/organiza√ß√£o GitHub: "
read GITHUB_USER

echo -n "Digite o nome do reposit√≥rio (sugest√£o: ravian-quantum): "
read REPO_NAME
REPO_NAME=${REPO_NAME:-ravian-quantum}

# Configurar remote
GITHUB_URL="https://github.com/$GITHUB_USER/$REPO_NAME.git"
print_step "Configurando remote origin..."

# Remover origin existente se houver
git remote remove origin 2>/dev/null || true

# Adicionar novo origin
git remote add origin $GITHUB_URL
print_success "Remote configurado: $GITHUB_URL"

# Instru√ß√µes para criar reposit√≥rio no GitHub
echo ""
print_info "INSTRU√á√ïES PARA CRIAR O REPOSIT√ìRIO NO GITHUB:"
echo ""
echo "1. Acesse: https://github.com/new"
echo "2. Repository name: $REPO_NAME"
echo "3. Description: üåå RAVIAN QUANTUM - Agente Arquiteto Qu√¢ntico revolucion√°rio que unifica 5 linguagens de computa√ß√£o qu√¢ntica"
echo "4. Selecione 'Public' (recomendado para open source)"
echo "5. N√ÉO marque 'Add a README file' (j√° temos um)"
echo "6. N√ÉO marque 'Add .gitignore' (j√° temos um)"
echo "7. License: MIT License (recomendado)"
echo "8. Clique 'Create repository'"
echo ""

echo -n "Pressione ENTER ap√≥s criar o reposit√≥rio no GitHub..."
read

# Fazer push
print_step "Enviando c√≥digo para GitHub..."
git push -u origin main

if [ $? -eq 0 ]; then
    print_success "C√≥digo enviado para GitHub com sucesso!"
    echo ""
    echo -e "${BLUE}üéâ Seu reposit√≥rio est√° dispon√≠vel em:${NC}"
    echo -e "${GREEN}$GITHUB_URL${NC}"
    echo ""
    
    # Instru√ß√µes adicionais
    print_info "PR√ìXIMOS PASSOS RECOMENDADOS:"
    echo ""
    echo "1. üåü Adicione uma estrela ao seu pr√≥prio repo"
    echo "2. üìù Configure GitHub Pages (Settings > Pages > Source: GitHub Actions)"
    echo "3. üîê Configure secrets para CI/CD se necess√°rio"
    echo "4. üè∑Ô∏è Crie uma release: git tag v1.0.0 && git push origin v1.0.0"
    echo "5. üì¢ Compartilhe com a comunidade cient√≠fica!"
    echo ""
    
    # Gerar badge do README
    echo "üìä BADGES PARA SEU README:"
    echo ""
    echo "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)"
    echo "[![Quantum](https://img.shields.io/badge/Quantum-Computing-blueviolet)](https://github.com/$GITHUB_USER/$REPO_NAME)"
    echo "[![RAVIAN](https://img.shields.io/badge/RAVIAN-QUANTUM-ff69b4)](https://github.com/$GITHUB_USER/$REPO_NAME)"
    echo "[![Status](https://img.shields.io/badge/Status-Revolutionary-success)](https://github.com/$GITHUB_USER/$REPO_NAME)"
    
else
    print_error "Erro ao enviar para GitHub. Verifique se:"
    echo "- O reposit√≥rio foi criado no GitHub"
    echo "- Voc√™ tem permiss√µes de escrita"
    echo "- Sua autentica√ß√£o GitHub est√° configurada"
    echo ""
    echo "Para configurar autentica√ß√£o:"
    echo "git config --global credential.helper store"
    echo "ou configure SSH: https://docs.github.com/en/authentication"
fi

print_success "Setup do GitHub conclu√≠do! üöÄ"
